<snippet>
	<content><![CDATA[
string to_string(const string& s) {
    return '"' + s + '"';
}

string to_string(const char* s) {
    return to_string((string) s);
}

string to_string(const char& c) {
    char s[1] = {c};
    return to_string(s);
}

string to_string(bool b) {
    return (b ? "true" : "false");
}

template <size_t N>
string to_string(bitset<N> v) {
    string res = "";
    for (size_t i = 0; i < N; i++) {
        res += static_cast<char>('0' + v[i]);
    }
    return res;
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
    return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A>
string to_string(vector<A> v) {
    bool first = true;
    string res = "{";
    for (auto p : v) {
        if (!first) {
            res += ", ";
        }
        first = false;
        res += to_string(p);
    }
    res += "}";
    return res;
}

template <typename A, typename B>
string to_string(map<A, B> p) {
    string ret = "{";
    int n = p.size();
    for(auto it : p){
        ret += to_string(it);
        n--;
        if(n != 0){
            ret += ", ";
        }
    }
    ret += "}";
    return ret;
}

template <typename A>
string to_string(queue<A> q) {
    string ret = "{";
    int n = q.size();
    while(!q.empty()){
        ret += to_string(q.front());
        q.pop();
        n--;
        if(n != 0){
            ret += ", ";
        }
    }
    ret += "}";
    return ret;
}

template <typename A>
string to_string(stack<A> s) {
    string ret = "{";
    int n = s.size();
    while(!s.empty()){
        ret += to_string(s.top());
        s.pop();
        n--;
        if(n != 0){
            ret += ", ";
        }
    }
    ret += "}";
    return ret;
}

template <typename A, typename B, typename C>
string to_string(priority_queue<A, B, C> pq) {
    string ret = "{";
    int n = pq.size();
    while(!pq.empty()){
        ret += to_string(pq.top());
        pq.pop();
        n--;
        if(n != 0){
            ret += ", ";
        }
    }
    ret += "}";
    return ret;
}

template <typename A>
string to_string(priority_queue<A> pq) {
    string ret = "{";
    int n = pq.size();
    while(!pq.empty()){
        ret += to_string(pq.top());
        pq.pop();
        n--;
        if(n != 0){
            ret += ", ";
        }
    }
    ret += "}";
    return ret;
}

template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) {
    return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")";
}

template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) {
    return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")";
}

void DBG() {
    cerr << "]" << endl;
}

template<class H, class... T> void DBG(H h, T... t) {
    cerr << to_string(h);
    if(sizeof...(t))
        cerr << ", ";
    DBG(t...);
}

#ifndef ONLINE_JUDGE
#define debug(...) cerr << "[" << #__VA_ARGS__ << "] : [", DBG(__VA_ARGS__)
#else
#define debug(...) 0
#endif
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>dbg</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
